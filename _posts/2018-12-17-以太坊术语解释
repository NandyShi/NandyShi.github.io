---
layout:     post
title:      以太坊术语解释
subtitle:   持久维护
date:       2018-12-17
author:     NandyShi
header-img: img/post-bg-universe.jpg
catalog: true
tags:
    - ETH
    - 术语
---
##以太坊术语解释(持久维护)
**EVM**：Ethereum Virtual Machine，以太坊虚拟机，这是一个隔离的轻量级的VM，运行在其中的智能合约代码无法访问本地网络、文件系统和其他进程；

**EOA**: External Owned Accounts，以太坊外部账号，通过与其关联的私钥（private key）来发送 ether 和 消息；

**Contracts Accounts**：合约账户，存储可在 EVM 中执行的智能合约代码，只能被 EOA 来调用激活，当合约账户被调用时，存储其中的智能合约会在矿工处的EVM中自动执行，并消耗一定的 Gas，Gas 通过 EOA 中的以太币进行购买；

**Transaction**: 以太坊中的交易是指从 EOA 发送给另一个账户的消息的签过名的数据包，一笔交易主要包括：接收方、发送方、gasLimit、gasPrice、Value(交易金额)等等；

**Message**：消息是一个不能序列化的，并且只存在于以太坊运行环境中的虚拟对象，一条消息主要包括：消息的发送方、接收方、gasLimit等等；

**Smart Contract**: 智能合约，是以太坊中最重要的一个概念，以太坊支持通过图灵完备的高级语言，如：Solidity、Serpent等来开发智能合约，其可以接受来自外部的交易请求和事件来触发合约代码逻辑，进一步生成新的交易和事件，甚至进一步调用其他的智能合约；[Smart Contract Wiki](https://en.wikipedia.org/wiki/Smart_contract "Smart Contract Wiki")

**Gas**：燃料，没执行一条合约指令就会消耗一定的燃料（Gas），当某个交易还未执行结束，而 Gas 已经消耗完时，则合约执行终止并回滚状态；Gas 可以和 ether 进行兑换，但是有个注意点就是，ether 的价格是波动的，但运行某段智能合约的费用可以是固定的，可以通过设定 Gas Price 等来进行调节；

**GPO**: Gas Price Oracle，Gas 价格预测；[GPO Wiki](https://github.com/ethereum/go-ethereum/wiki/Gas-Price-Oracle "GPO Wiki")

**LES**: Light Ethereum Subprotocol，以太坊客户端的轻量级的子协议，只需要下载区块头，其他详细信息可以按需获取；[LES Wiki](https://github.com/ethereum/wiki/wiki/Light-client-protocol "LES Wiki")

**Whisper**: 是一个结合了分布式哈希表(DHT)和P2P通信技术，用来实现以太坊节点之间通信的协议，通过 Whisper 协议，以太坊节点可以将信息发送给某个特定节点，或者通过附加在信息中的标签或主题将信息发送给多个节点，主要用于大规模的点对点数据发现、信号协商、最小传输通信、完全隐私保护的 DApp 而设计的；[Whisper Wiki](https://github.com/ethereum/wiki/wiki/Whisper "Whisper Wiki")

**Swarm**: Swarm is a distributed storage platform and content distribution service, a native base layer service of the ethereum web 3 stack；[Swarm Wiki](https://github.com/ethersphere/swarm "Swarm Wiki")

**Uncle Block**: 叔块，是一种激励机制，用于降低矿池的优势，并减少区块产生的间隔（从 10 分钟降低到 15 秒左右）；

**Patricia Trie**: 一种压缩前缀树，是一种更节省空间的树，对于 trie 的每个节点，如果该节点是其父节点唯一的儿子的话，就和父节点结合；

**Merkle Tree**: 默克尔树，也称为 Hash Tree，该树的叶子节点存储的是数据块的 Hash 值，非叶子节点是其对应子节点的串联字符串的 Hash 值；

**RLP**: RLP (递归长度前缀)提供了一种适用于任意二进制数据数组的编码，RLP已经成为以太坊中对对象进行序列化的主要编码方式；[RLP Wiki](https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-RLP "RLP Wiki")；

**MPT**：Merkle Patricia Tree，是 Merkle Tree 和 Patricia Tree 混合后的产物，在以太坊中，是采用了 RLP 算法进行编码，MPT 树中主要包括空节点、叶子节点、扩展节点和分支节点；
**ZKP**: Zero Knowledge Proof，零知识证明；

**ERC20**: 可以理解成 Ethereum 的一个 Token 协议规范，所有基于 Ethereum 开发的 Token 合约都遵守这个规范。遵守 ERC20 协议规范的 Token 可以被各种 Ethereum 钱包支持。[ERC20 Token Standard](https://theethereum.wiki/w/index.php/Main_Page "ERC20 Token Standard")；

**Address**: 地址的合法校验参考 [EIP-55 规范](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md "EIP-55 规范")；
## 参考

- [精通比特币第二版](https://github.com/bitcoinbook/bitcoinbook)
- [比特币开发指南](https://bitcoin.org/en/developer-guide)
